* Setup

** Configure package sources
#+BEGIN_SRC emacs-lisp
  (setq package-archives '(("org"       . "http://orgmode.org/elpa/")
                           ("gnu"       . "http://elpa.gnu.org/packages/")
                           ("melpa"     . "https://melpa.org/packages/")))
  (setq package-enable-at-startup nil)
#+END_SRC

** Edit config
#+BEGIN_SRC emacs-lisp
  (defun find-config ()
    "Edit settings.org"
    (interactive)
    (find-file "~/.emacs.d/settings.org"))
  (global-set-key (kbd "C-c i") 'find-config)
#+END_SRC

** gruvbox
#+BEGIN_SRC emacs-lisp
  (load-theme 'gruvbox t)
#+END_SRC

** bootstrap use-package
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

** Remove bells
#+BEGIN_SRC emacs-lisp
  ;; (menu-bar-mode -1)
  (scroll-bar-mode 0)
  (tool-bar-mode 0)
  (setq visible-bell nil)
  (setq ring-bell-function 'ignore)
#+END_SRC

** Misc
#+BEGIN_SRC emacs-lisp
  (setq default-input-method "russian-computer")
  (defalias 'yes-or-no-p 'y-or-n-p)
  (line-number-mode 1)
  (column-number-mode 1)
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)
  (set-frame-font "Anonymous Pro for Powerline-18:antialiasing=false")
  ;; (set-frame-font "Iosevka-19:light:antialiasing=false")
  ;; Disable backup/autosave files
  (setq make-backup-files        nil)
  (setq auto-save-default        nil)
  (setq auto-save-list-file-name nil)

  ;; show relative line numbers
  (global-display-line-numbers-mode)
  ;; (add-hook 'org-mode-hook (lambda () (display-line-numbers-mode -1))) ;; remove line numbers in org

  (setq display-line-numbers-type 'relative)
  (setq display-line-numbers-current-absolute t)
  (global-hl-line-mode 1)
    ;; (global-visual-line-mode t)
  (electric-pair-mode 1)
  (blink-cursor-mode 0)

  (setq require-final-newline t) ;; remove end of file message in magit

  (setq show-paren-delay 0)
  (show-paren-mode 1)

#+END_SRC

** Evil mode
#+BEGIN_SRC emacs-lisp
;; (use-package evil
;;   :ensure t ;; install the evil package if not installed
;;   :init ;; tweak evil's configuration before loading it
;;    (setq evil-search-module 'evil-search)
;;    (setq evil-ex-complete-emacs-commands nil)
;;    (setq evil-vsplit-window-right t)
;;    (setq evil-split-window-below t)
;;    (setq evil-shift-round nil)
;;    (setq evil-want-C-u-scroll t)
;;   :config ;; tweak evil after loading it
;;   (evil-mode 1))

(use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    :config
    (evil-mode 1))

(use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

(use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode))

(use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode))

;; evil org mode
(use-package evil-org
    :ensure t
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
	    (lambda () (evil-org-set-key-theme))))

(use-package evil-indent-textobject
    :ensure t)

(use-package evil-commentary
    :ensure t
    :config
    (evil-commentary-mode))

#+END_SRC

** General
#+BEGIN_SRC emacs-lisp
  (use-package general :ensure t)
   (general-evil-setup)

#+END_SRC

** Drag stuff
#+BEGIN_SRC emacs-lisp
  (use-package drag-stuff                 ;
    :ensure t)
  (drag-stuff-global-mode 1)
  (global-set-key (kbd "M-C-k") 'drag-stuff-up)
  (global-set-key (kbd "M-C-j") 'drag-stuff-down)

#+END_SRC

** Main evil keybindings
#+BEGIN_SRC emacs-lisp
    (general-define-key "M-o" 'other-window)
    (evil-leader/set-leader ",")

    (evil-leader/set-key
	"f" 'projectile-command-map
	"R" 'counsel-projectile-rg
	"w" 'save-buffer
	"v" 'evil-window-vsplit
	"o" 'delete-other-windows
	"k" 'kill-current-buffer
	"s" 'avy-goto-word-1
	"e" 'avy-goto-char-timer
	"l" 'avy-goto-line
	"b" 'ivy-switch-buffer
	"D" 'deer
	",b" 'bookmark-jump
	",v" 'vue-mode
	"c" 'org-capture
	"." 'org-time-stamp
	"a" 'org-agenda
	"zf" 'fold-this
	"Zf" 'fold-this-all
	"za" 'fold-this-unfold-at-point
	"Za" 'fold-this-unfold-all
	"gr" 'my-revert-buffer
	"gs" 'magit-status)

    (defun my-revert-buffer ()
      "Reload file from disk"
      (interactive)
      (revert-buffer t (not (buffer-modified-p)) t))

    (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
    (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)

#+END_SRC

** Org-mode evil keybindings
#+BEGIN_SRC emacs-lisp
    (evil-leader/set-key-for-mode 'org-mode
	"A" 'org-archive-subtree
	",d" 'org-deadline
	",s" 'org-schedule
	"go" 'org-open-at-point
	"gt" 'org-set-tags-command
	"r" 'org-refile
	"t" 'org-todo
	",z" 'my-delete-capture-window
	"z" 'my-save-and-close
	)

    (general-define-key
    :keymaps 'org-mode-map
    :states '(normal visual)
    :prefix ","
    "nn" '(org-narrow-to-subtree :which-key "narrow to subtree"))

    (general-define-key
    :keymaps 'org-mode-map
    :states '(normal visual)
    :prefix ","
    "nw" '(widen :which-key "widen"))

    (general-define-key
	:keymaps 'org-mode-map
	:states 'normal
	"C-k" 'org-previous-visible-heading)

    ;; open link on return in org-modes
    (general-define-key
	:keymaps 'org-mode-map
	:states 'normal
	"RET" 'org-open-at-point)
   
    (defun my-delete-capture-window ()
      "Run `org-capture-kill' and `delete-frame' in sequence."
      (interactive)
      (org-capture-kill)
      (delete-frame))

  (defun my-save-and-close ()
    "save and close org-capture frame"
    (interactive)
    (org-capture-finalize)
    (delete-frame))
#+END_SRC

** Quit minibuffer on escape
#+BEGIN_SRC emacs-lisp
(defun minibuffer-keyboard-quit ()
    (interactive)
    (if (and delete-selection-mode transient-mark-mode mark-active)
	(setq deactivate-mark  t)
    (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
    (abort-recursive-edit)))

    (define-key evil-visual-state-map [escape] 'keyboard-quit)
    (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
#+END_SRC

** ivy swiper counsel
#+BEGIN_SRC emacs-lisp
  (use-package smex ;; smart M-x
    :ensure t)

  (use-package ivy
    :ensure t
    :diminish ivy-mode
    :config
    (ivy-mode t))
    
  (setq ivy-initial-inputs-alist nil)
  (setq ivy-use-virtual-buffers t)       ; extend searching to bookmarks and
  (setq ivy-height 20)                   ; set height of the ivy window
  (setq ivy-count-format "(%d/%d) ")     ; count format, from the ivy help page
  (setq ivy-display-style 'fancy)
  (setq ivy-format-function 'ivy-format-function-line) ; Make highlight extend all the way to the right
  ;; TODO testing out the fuzzy search
  (setq ivy-re-builders-alist
        '((counsel-M-x . ivy--regex-fuzzy) ; Only counsel-M-x use flx fuzzy search
          (t . ivy--regex-plus)))

  (use-package counsel
    :ensure t
    :bind (("M-x" . counsel-M-x)))

  (general-define-key
   :states '(normal visual)
   :prefix ","
   "x" '(counsel-M-x :which-key "mycounsel"))

  (use-package swiper
    :ensure t)
  (general-define-key
   :states '(normal visual)
   "/" '(swiper :which-key "swiper"))

  (use-package ivy-hydra
    :ensure t)

#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
      (setq magit-repository-directories '(("~/Develop/" . 2) ("~/org/" . 1) ))) 
  ;; evil-magit keybinding
  (use-package evil-magit)
  ;; optional: this is the evil state that evil-magit will use
  (setq evil-magit-state 'normal)
  ;; optional: disable additional bindings for yanking text
  (setq evil-magit-use-y-for-yank nil)

#+END_SRC
   
** Git-gutter
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :config
    (global-git-gutter-mode +1)
    (set-face-background 'git-gutter:modified 'nil) ;; background color
    (set-face-background 'git-gutter:added 'nil) ;; background color
    (set-face-background 'git-gutter:deleted 'nil) ;; background color
    (set-face-foreground 'git-gutter:added "green")
    (set-face-foreground 'git-gutter:deleted "red"))
#+END_SRC

** Ranger
#+BEGIN_SRC emacs-lisp
  (use-package ranger
    :config
    (ranger-override-dired-mode t)
    (setq ranger-cleanup-eagerly t))
  (defun xah-dired-mode-setup ()
    "to be run as hook for `dired-mode'."
    (dired-hide-details-mode 1))
  (add-hook 'dired-mode-hook 'xah-dired-mode-setup)
#+END_SRC
** Preferences
*** Swap windows
#+BEGIN_SRC emacs-lisp

  (general-define-key
   :states 'normal
    :prefix ",,"
   "x" 'window-swap-states)

#+END_SRC

*** swap : ;
#+BEGIN_SRC emacs-lisp

  ;; swap ;: for better experience
  (general-swap-key nil 'motion
    ";" ":")

;; remap find next char and reverse

    (general-define-key
    :states 'normal
    "SPC" 'evil-repeat-find-char)

    (general-define-key
    :states 'normal
      "DEL" 'evil-repeat-find-char-reverse)

#+END_SRC

*** scrolling
#+BEGIN_SRC emacs-lisp
  (setq-default
   ;; left-margin-width 1 right-margin-width 1
   ;; scroll-conservatively most-positive-fixnum       ; Always scroll by one line
   scroll-conservatively 100000       ; Always scroll by one line
   scroll-margin 5
   scroll-preserve-screen-position 1
   cursor-in-non-selected-windows t)
#+END_SRC

*** jump to end /start of line in insert mode
#+BEGIN_SRC emacs-lisp
    (general-imap "A"
      (general-key-dispatch 'self-insert-command
        :timeout 0.2
        "A" 'evil-append-line))

    (general-imap "I"
      (general-key-dispatch 'self-insert-command
        :timeout 0.2
        "I" 'evil-insert-line))

    (general-imap ";"
      (general-key-dispatch 'self-insert-command
        :timeout 0.2
        ";" (general-simulate-key ('evil-append-line ";"))))

  ;; (general-nmap ";"
  ;;       (general-key-dispatch 'self-insert-command
  ;;         :timeout 0.2
  ;;         ";" (general-simulate-key ('evil-append-line ";" ))))

#+END_SRC

** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1)
    :config
    (setq yas-indent-line nil)
    (define-key yas-minor-mode-map (kbd "<tab>") nil)
    (define-key yas-minor-mode-map (kbd "TAB") nil)
    ;; Bind `SPC' to `yas-expand' when snippet expansion available (it
    ;; will still call `self-insert-command' otherwise).
    (define-key yas-minor-mode-map (kbd "SPC") yas-maybe-expand)
    ;; (define-key yas-minor-mode-map (kbd "TAB") #'yas-expand)
    ;; (define-key yas-minor-mode-map (kbd "<tab>") #'yas-expand)
    )

  (general-define-key
   :states '(normal visual)
   :prefix ","
   "ya" 'yas-new-snippet)

  (general-define-key
   :states '(normal visual)
   :prefix ","
   "yv" 'yas-visit-snippet-file)
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode)
    (setq projectile-enable-caching t)
    (setq projectile-project-search-path '("~/Develop/"))
    (setq projectile-completion-system 'ivy))
  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode))
#+END_SRC

** Autocomplete
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    (global-company-mode t))

  (add-hook 'after-init-hook 'global-company-mode)

#+END_SRC

** Cursor color
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "/Users/admin/.emacs.d/lisp")
  (require 'cursor-chg)  ; Load the library
   ;; (toggle-cursor-type-when-idle 1) ; Turn on cursor change when Emacs is idle
   (change-cursor-mode 1) ; Turn on change for overwrite, read-only, and input mode
#+END_SRC

** orgmode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib)
  (setq gtd-base-path (expand-file-name "/Users/admin/Develop/org/"))
  (defun gtd-path (sub-path) (concat gtd-base-path sub-path))

  (defvar inbox (gtd-path "inbox.org"))
  (defvar gtd (gtd-path "gtd.org"))
  (defvar foo (gtd-path "foo.org"))
  (defvar journal (gtd-path "journal.org"))
  (defvar roam (gtd-path "roam/"))
  (defvar someday (gtd-path "someday.org"))
  (defvar tickler (gtd-path "tickler.org"))
  (defvar ref (gtd-path "ref.org"))
  (defvar keys (gtd-path "keys.org"))

  (setq org-agenda-files (list inbox foo journal gtd ref someday tickler))

  (setq org-refile-targets `((gtd :maxlevel . 5)
                             (ref :maxlevel . 5)
                             (inbox :maxlevel . 5)
                             (foo :maxlevel . 2)
                             (journal :maxlevel . 2)
                             (roam :maxlevel . 2)
                             (gtd :maxlevel . 2)
                             (someday :maxlevel . 5)
                             (tickler :maxlevel . 5)))

  (setq org-refile-use-outline-path t)  ;; refile items in steps with ivy
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
  (setq org-agenda-todo-ignore-scheduled 'all) ;; ignore todo which is scheduled in todo list
  (setq org-agenda-todo-ignore-deadlines 'all) ;; ignore deadlines in todo list
  (setq calendar-week-start-day 1)

      ;; set custom agenda view
      ;; (setq org-agenda-custom-commands
      ;;       '(("f" "Ideas" todo "FOO")
      ;;       ("b" "Купить" tags "buy")))

  (defvar inbox-capture-template "* %i%?\n%U\n")
  (defvar todo-capture-template "* TODO %i%?          \n%U\n%a\n")
  (defvar tickler-capture-template "* %i%?\n%U\n")
  (defvar fix-capture-template "* BUG %i%?\n%U\n%a\n")
  (defvar keys-capture-template "* aa%?")

  ;; this is something with capture links, I think
  (defun transform-square-brackets-to-round-ones(string-to-transform)
    "Transforms [ into ( and ] into ), other chars left unchanged."
    (concat 
     (mapcar #'(lambda (c) (if (equal c ?[) ?\( (if (equal c ?]) ?\) c))) string-to-transform))
    )

  (setq org-capture-templates `(
                                ("i" "Inbox" entry (file inbox) ,inbox-capture-template)
                                ("t" "Inbox [TODO]" entry (file inbox) ,todo-capture-template)
                                ("T" "Tickler" entry (file+headline tickler "Tickler") ,tickler-capture-template)
                                ("f" "Foo" entry (file+headline foo "ideas") "* FOO %i%?")
                                ("k" "Keys" entry (file+headline keys "Keys") ,keys-capture-template)
                                ("n" "Note" entry (file ref) ,inbox-capture-template)
                                ("B" "Bug" entry (file+headline gtd "Bugs"),fix-capture-template)
                                ("j" "Journal" entry (file+olp+datetree "~/Develop/org/journal.org") "**** %<%H:%M> - %?\n%a\n" :tree-type week)
                                ("p" "Protocol" entry (file inbox) 
                                      "* %?\n%u\n\n%a\n \n%i\n")
                                ("L" "Link" entry (file inbox)
                                 "* [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n%? \n\n%u")
                                ("m" "Meeting" entry (file inbox)
                                 "* MEETING with %? :MEETING:\n%U\n\n" :clock-in t :clock-resume t)
                                ("b" "Buy" entry (file+headline gtd "Buy") "* %i%?\n%U")
                                ))

  (setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "WAITING(w!)" "|" "DONE(d!)" "CANCELLED(c!)")
                            (sequence "FOO(f)" "|" "ZEN(z!)")
                            (sequence "BUG(B)" "|" "FIXED(x!)")))

  (setq org-log-into-drawer 'LOGBOOK)

  (setq org-todo-keyword-faces
        '(("WAITING" . "#666565") ("CANCELLED" . "#663333") ("NEXT" . "Yellow") ("DONE" . "#00ff00") ("FOO" . "#51ABFF")))

	(setq org-tag-alist
        '(("work" . ?w)
          ("home" . ?h)
          ;; ("PRESENTATION" . ?p)
          ;; ("BRAINSTORM" . ?s)
          ("read" . ?r)
          ("emacs" . ?e)
          ("refile" . ?f)
	  ("code" . ?c)
	  ;; ("article" . ?a)
          ("movie" . ?m)))

  ;; this for prettify orgmode
  (setq org-startup-indented t
        ;; org-ellipsis "  "
        org-hide-leading-stars t
        org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-pretty-entities t
        org-hide-emphasis-markers t
        org-agenda-block-separator ""
        org-fontify-whole-heading-line t
        org-fontify-done-headline t
        org-fontify-quote-and-verse-blocks t)

#+END_SRC
  
** org-agenda evil bindings
#+BEGIN_SRC emacs-lisp
    (eval-after-load 'org-agenda
     '(progn
        (evil-set-initial-state 'org-agenda-mode 'normal)
        (evil-define-key 'normal org-agenda-mode-map
          (kbd "<RET>") 'org-agenda-switch-to
          (kbd "\t") 'org-agenda-goto

          "q" 'org-agenda-quit
          "x" 'org-agenda-exit
          "r" 'org-agenda-refile
          "a" 'org-archive-subtree-default
          "gr" 'org-agenda-redo
          "S" 'org-save-all-org-buffers
          "gj" 'org-agenda-goto-date
          "gJ" 'org-agenda-clock-goto
          "gm" 'org-agenda-bulk-mark
          "go" 'org-agenda-open-link
          "s" 'org-agenda-schedule
          "B" 'org-agenda-bulk-action
          "+" 'org-agenda-priority-up
          ;; "," 'org-agenda-priority
          "-" 'org-agenda-priority-down
          "y" 'org-agenda-todo-yesterday
          "n" nil  ; evil-search-next
          "n" 'org-agenda-add-note
          "t" 'org-agenda-todo
          ":" 'org-agenda-set-tags
          ";" 'org-timer-set-timer
          "I" 'org-agenda-clock-in
          "O" 'org-agenda-clock-out
          "u" 'org-agenda-bulk-unmark
          "j"  'org-agenda-next-line
          "k"  'org-agenda-previous-line
          "vt" 'org-agenda-toggle-time-grid
          "va" 'org-agenda-archives-mode
          "vw" 'org-agenda-week-view
          "vl" 'org-agenda-log-mode
          "vd" 'org-agenda-day-view
          "vc" 'org-agenda-show-clocking-issues
          "g/" 'org-agenda-filter-by-tag
          "o" 'delete-other-windows
          "gh" 'org-agenda-holiday
          "gv" 'org-agenda-view-mode-dispatch
          "f" 'org-agenda-later
          "b" 'org-agenda-earlier
          "c" 'org-capture
          "e" 'org-agenda-set-effort
          "{" 'org-agenda-manipulate-query-add-re
          "}" 'org-agenda-manipulate-query-subtract-re
          "A" 'org-agenda-toggle-archive-tag
          "." 'org-agenda-goto-today
          ;; "0" 'evil-digit-argument-or-evil-beginning-of-line
          ;; "<" 'org-agenda-filter-by-category
          ">" 'org-agenda-date-prompt
          "F" 'org-agenda-follow-mode
          "D" 'org-agenda-deadline
          "H" 'org-agenda-holidays
          "J" 'org-agenda-next-date-line
          "K" 'org-agenda-previous-date-line
          "L" 'org-agenda-recenter
          ;; "P" 'org-agenda-show-priority
          "R" 'org-agenda-clockreport-mode
          "Z" 'org-agenda-sunrise-sunset
          "T" 'org-agenda-show-tags
          "X" 'org-agenda-clock-cancel
          "[" 'org-agenda-manipulate-query-add
          ;; "g\\" 'org-agenda-filter-by-tag-refine
          "]" 'org-agenda-manipulate-query-subtract)))

#+END_SRC

** Vue
#+BEGIN_SRC emacs-lisp
  (use-package vue-mode
    :ensure t)
  (add-hook 'mmm-mode-hook
            (lambda ()
              (set-face-background 'mmm-default-submode-face nil)))
#+END_SRC
  
** JScript
#+BEGIN_SRC emacs-lisp
  (use-package js
    :ensure nil
    :delight js-mode "JavaScript"
    :preface
    (defun me/js-prettify-symbols-mode-on ()
      (add-to-list 'prettify-symbols-alist '("function" . ?\u0192))
      (prettify-symbols-mode 1))
    :hook (js-mode . me/js-prettify-symbols-mode-on)
    :config (setq-default js-indent-level 2))

  (use-package json-mode
    :delight json-mode "JSON"
    :mode "\\.json\\'"
    :preface
    (defun me/json-set-indent-level ()
      (setq-local js-indent-level 2))
    :hook (json-mode . me/json-set-indent-level))

#+END_SRC

** Tab config
#+BEGIN_SRC emacs-lisp
  ;; Create a variable for our preferred tab width
  (setq custom-tab-width 2)

  ;; Two callable functions for enabling/disabling tabs in Emacs
  (defun disable-tabs () (setq indent-tabs-mode nil))
  (defun enable-tabs  ()
    (local-set-key (kbd "TAB") 'tab-to-tab-stop)
    (setq indent-tabs-mode t)
    (setq tab-width custom-tab-width))

  ;; Hooks to Enable Tabs
  (add-hook 'prog-mode-hook 'enable-tabs)
  (add-hook 'vue-mode-hook 'enable-tabs)
  ;; Hooks to Disable Tabs
  (add-hook 'lisp-mode-hook 'disable-tabs)
  (add-hook 'emacs-lisp-mode-hook 'disable-tabs)

  ;; Language-Specific Tweaks
  (setq-default python-indent-offset custom-tab-width) ;; Python
  (setq-default js-indent-level custom-tab-width)      ;; Javascript

  ;; Making electric-indent behave sanely
  (setq-default electric-indent-inhibit t)

  ;; Make the backspace properly erase the tab instead of
  ;; removing 1 space at a time.
  (setq backward-delete-char-untabify-method 'hungry)

  ;; (OPTIONAL) Shift width for evil-mode users
  ;; For the vim-like motions of ">>" and "<<".
  (setq-default evil-shift-width custom-tab-width)
  (setq pug-tab-width 2)
  ;; WARNING: This will change your life
  ;; (OPTIONAL) Visualize tabs as a pipe character - "|"
  ;; This will also show trailing characters as they are useful to spot.
  (setq whitespace-style '(face tabs tab-mark trailing))

  (setq whitespace-display-mappings
        '((tab-mark 9 [124 9] [92 9]))) ; 124 is the ascii ID for '\|'
  (global-whitespace-mode) ; Enable whitespace mode everywhere

#+END_SRC

** Insert blank lines
#+BEGIN_SRC emacs-lisp
  (defun around-line ()
    "Insert an empty line above and below the current line."
    (interactive)
    (save-excursion
      (end-of-line)
      (open-line 1)
      (end-of-line 0)
      (open-line 1)))

  (general-define-key
   :states '(normal visual)
   :prefix ",,"
   "a" 'around-line)

#+END_SRC

** Evil-googles
package show feedback on evil edit code
#+BEGIN_SRC emacs-lisp
  (use-package evil-goggles
    :ensure t
    :config
    (evil-goggles-mode))
#+END_SRC

** evil-numbers
#+BEGIN_SRC emacs-lisp
  (use-package evil-numbers
  :ensure t)
(define-key evil-normal-state-map (kbd "C-=") 'evil-numbers/inc-at-pt)
(define-key evil-normal-state-map (kbd "C--") 'evil-numbers/dec-at-pt)

#+END_SRC


** Avy
#+BEGIN_SRC emacs-lisp
  ;; (use-package avy :ensure t
  ;;   :commands (avy-goto-word-1))
#+END_SRC
